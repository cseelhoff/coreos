---
- hosts: localhost
  gather_facts: no
  tasks:
    - name: Include variables from vars.yml
      include_vars:
        file: vars.yml

    - name: Gather network facts
      setup:
        gather_subset: network

    - name: Set additional variables
      set_fact:
        host_ip: "{{ ansible_default_ipv4.address }}"
        dns_server_ip: "{{ ansible_default_ipv4.address }}"
        bootstrap_ip: "{{ ansible_default_ipv4.address }}"
        dhcp_router_ip: "{{ ansible_default_ipv4.gateway }}"
        bootstrap_fqdn: "{{ bootstrap_shortname }}.{{ domain_name }}"
        nexus_frontend_fqdn: "{{ nexus_shortname }}.{{ domain_name }}"
        pihole_backend_fqdn: "pihole-backend.{{ domain_name }}"
        pihole_frontend_fqdn: "{{ pihole_shortname }}.{{ domain_name }}"
        vm_nexus_frontend_fqdn: "{{ vm_nexus_shortname }}.{{ domain_name }}"
        docker_registry_frontend_fqdn: "{{ docker_shortname }}.{{ domain_name }}"
        vm_docker_registry_frontend_fqdn: "{{ vm_docker_shortname }}.{{ domain_name }}"
        traefik_fqdn: "{{ traefik_shortname }}.{{ domain_name }}"
        portainer_frontend_fqdn: "{{ portainer_shortname }}.{{ domain_name }}"
        openldap_frontend_fqdn: "{{ openldap_shortname }}.{{ domain_name }}"
        nexus_backend_fqdn: "{{ nexus_shortname }}-backend01.{{ domain_name }}"
        vm_nexus_backend_fqdn: "{{ vm_nexus_shortname }}-backend01.{{ domain_name }}"
        docker_registry_backend_fqdn: "{{ docker_shortname }}-backend01.{{ domain_name }}"
        vm_docker_registry_backend_fqdn: "{{ vm_docker_shortname }}-backend01.{{ domain_name }}"
        portainer_backend_fqdn: "{{ portainer_shortname }}-backend01.{{ domain_name }}"
        openldap_backend_fqdn: "{{ openldap_shortname }}-backend01.{{ domain_name }}"
        vm_fqdn: "{{ vm_shortname }}.{{ domain_name }}"
        traefik_ip: "{{ ansible_default_ipv4.address }}"
        pihole_ip: "{{ ansible_default_ipv4.address }}"
        nexus_ip: "{{ ansible_default_ipv4.address }}"
        docker_registry_ip: "{{ ansible_default_ipv4.address }}"
        pihole_backend_url: "http://pihole-backend.{{ domain_name }}:{{ pihole_port }}"
        nexus_backend_url: "http://{{ nexus_shortname }}-backend01.{{ domain_name }}:{{ nexus_port }}"
        vm_nexus_backend_url: "http://{{ vm_nexus_shortname }}-backend01.{{ domain_name }}:{{ vm_nexus_port }}"
        docker_registry_backend_url: "http://{{ docker_shortname }}-backend01.{{ domain_name }}:{{ docker_registry_port }}"
        vm_docker_registry_backend_url: "http://{{ vm_docker_shortname }}-backend01.{{ domain_name }}:{{ vm_docker_registry_port }}"
        portainer_localhost_url: "http://localhost:{{ portainer_port }}"
        portainer_backend_url: "http://{{ portainer_shortname }}-backend01.{{ domain_name }}:{{ portainer_port }}"
        openldap_backend_url: "http://{{ openldap_shortname }}-backend01.{{ domain_name }}:{{ openldap_port }}"
        bootstrap_url: "http://{{ bootstrap_shortname }}.{{ domain_name }}"
        nexus_service_rest_url: "https://{{ nexus_shortname }}.{{ domain_name }}/service/rest/v1"
        vm_nexus_service_rest_url: "https://{{ vm_nexus_shortname }}.{{ domain_name }}/service/rest/v1"
        govc_connection_string: "{{ govc_username }}:{{ govc_password }}@{{ govc_fqdn }}"

    - name: Set additional variables 2
      set_fact:
        services:
          - "{{ pihole_frontend_fqdn }}"
          - "{{ traefik_fqdn }}"
          - "{{ nexus_frontend_fqdn }}"
          - "{{ vm_nexus_frontend_fqdn }}"
          - "{{ portainer_backend_fqdn }}"
          - "{{ openldap_backend_fqdn }}"
          - "{{ bootstrap_fqdn }}"

    - name: Generate a random password for Pi-hole
      set_fact:
        pihole_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits') }}"

    - name: Display Pi-hole password
      debug:
        var: pihole_password

    - name: Run Pi-hole Docker container
      docker_container:
        name: pihole
        hostname: virtual-pihole
        image: "{{ pihole_docker_image }}"
        state: started
        restart_policy: unless-stopped
        network_mode: host
        capabilities:
          - NET_ADMIN
        env:
          PIHOLE_DOMAIN: "{{ domain_name }}"
          VIRTUAL_HOST: "virtual-pihole.{{ domain_name }}"
          DNSMASQ_LISTENING: all
          PIHOLE_DNS_: "{{ upstream_dns_ips }}"
          DHCP_ACTIVE: "false"
          DHCP_START: "{{ dhcp_start_ip }}"
          DHCP_END: "{{ dhcp_end_ip }}"
          DHCP_ROUTER: "{{ dhcp_router_ip }}"
          WEBPASSWORD: "{{ pihole_password }}"
          WEB_PORT: "{{ pihole_port }}"
        volumes:
          - "/etc/pihole/"
          - "/etc/dnsmasq.d/"
          - "/etc/localtime:/etc/localtime:ro"
        ports:
          - "{{ pihole_port }}:{{ pihole_port }}"
          - "53:53/tcp"

    - name: Set custom DNS A records
      set_fact:
        custom_dns_a_record: |
          {{ govc_ip }} {{ govc_fqdn }}
          {{ bootstrap_ip }} {{ bootstrap_fqdn }}

    - name: Set custom CNAME records
      set_fact:
        custom_cname_record: |
          {{ pihole_backend_fqdn }},cname={{ bootstrap_fqdn }}
          {{ nexus_backend_fqdn }},cname={{ bootstrap_fqdn }}
          {{ docker_registry_backend_fqdn }},cname={{ bootstrap_fqdn }}
          {{ traefik_fqdn }},cname={{ bootstrap_fqdn }}
          {{ pihole_frontend_fqdn }},cname={{ bootstrap_fqdn }}
          {{ nexus_frontend_fqdn }},cname={{ bootstrap_fqdn }}
          {{ docker_registry_frontend_fqdn }},cname={{ bootstrap_fqdn }}

    - name: Append the custom DNS list to the pihole custom list file
      command: docker exec pihole sh -c "echo \"{{ custom_dns_a_record }}\" > /etc/pihole/custom.list"

    - name: Set custom CNAME record in dnsmasq configuration file
      command: docker exec pihole sh -c "echo \"{{ custom_cname_record }}\" > /etc/dnsmasq.d/05-pihole-custom-cname.conf"

    - name: Restart Pi-hole DNS service
      command: docker exec pihole pihole restartdns

    - name: Gather connection details
      command: nmcli -t -f NAME con show --active
      register: primary_conn
      changed_when: false

    - name: Set IPv4 address to current IP address and set DNS to use 127.0.0.1
      nmcli:
        conn_name: "{{ primary_conn.stdout_lines[0] }}"
        method4: "manual"
        ip4: "{{ ansible_default_ipv4.address }}"
        gw4: "{{ ansible_default_ipv4.gateway }}"
        dns4:
        - '127.0.0.1'
        state: present
      become: yes

    - name: Use nmcli to restart the connection
      shell: |
        nmcli connection down "{{ primary_conn.stdout_lines[0] }}"
        nmcli connection up "{{ primary_conn.stdout_lines[0] }}"
      become: yes

    - name: Create traefik-data volume
      community.docker.docker_volume:
        name: traefik-data
        state: present

    - name: Create temporary container to copy acme.json to traefik-data volume
      community.docker.docker_container:
        name: temp
        image: alpine
        command: tail -f /dev/null
        volumes:
          - traefik-data:/data
        state: started
        detach: yes

    - name: Check if acme.json exists in backup folder
      stat:
        path: backup/acme.json
      register: acme_json

    - name: Restore acme.json from backup
      command: docker cp backup/acme.json temp:/data/
      when: acme_json.stat.exists

    - name: Create new acme.json if acme.json doesn't exist
      command: docker exec temp touch /data/acme.json
      when: not acme_json.stat.exists

    - name: Set permissions to 600 on Traefik acme.json
      command: docker exec temp chmod 600 /data/acme.json

    - name: Stop and remove temporary container
      community.docker.docker_container:
        name: temp
        state: absent

    - name: Create proxy network for Traefik
      community.docker.docker_network:
        name: proxy
        state: present

    - name: Generate a random password for Traefik
      set_fact:
        traefik_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits') }}"

    - name: Display Traefik password
      debug:
        var: traefik_password

    - name: Set Traefik auth
      shell: htpasswd -nb "admin" "{{ traefik_password }}" | sed -e s/\\$/\\$\\$/g
      register: traefik_auth_output
      #changed_when: false

    - name: Set traefik_auth as the traefik_auth_output.stdout
      set_fact:
        traefik_auth: "{{ traefik_auth_output.stdout }}"
        
    - name: Generate a random password for Portainer
      set_fact:
        portainer_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits') }}"

    - name: Display Portainer password
      debug:
        var: portainer_password

    - name: Set Portainer bcrypt
      shell: htpasswd -nbB admin "{{ portainer_password }}" | cut -d ":" -f 2 | sed -e s/\\$/\\$\\$/g
      register: portainer_bcrypt_output
      #changed_when: false

    - name: Set portainer_bcrypt as the portainer_bcrypt_output.stdout
      set_fact:
        portainer_bcrypt: "{{ portainer_bcrypt_output.stdout }}"
        
    - name: Generate a random password for CoreOS admin
      set_fact:
        coreos_admin_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits') }}"

    - name: Display CoreOS admin password
      debug:
        var: coreos_admin_password

    - name: Set CoreOS admin password hash
      shell: mkpasswd --method=yescrypt "{{ coreos_admin_password }}"
      register: coreos_admin_password_hash
      changed_when: false

    - name: Check if ssh keypair exists
      stat:
        path: "~/.ssh/id_rsa"
      register: result

    - name: Create ssh keypair if it does not exist
      command: ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ''
      when: result.stat.exists == False

    - name: Set CoreOS ssh public key
      shell: cat ~/.ssh/id_rsa.pub
      register: coreos_ssh_public_key
      changed_when: false

    - name: Create Traefik docker-compose file
      template:
        src: bootstrap/traefik/docker-compose.yml.j2
        dest: bootstrap/traefik/docker-compose.yml

    - name: Create traefik.yml configuration file
      template:
        src: bootstrap/traefik/data/traefik.yml.j2
        dest: bootstrap/traefik/data/traefik.yml

    - name: Create traefik config.yml configuration file
      template:
        src: bootstrap/traefik/data/config.yml.j2
        dest: bootstrap/traefik/data/config.yml

    - name: Start Traefik with docker-compose
      community.docker.docker_compose:
        project_src: bootstrap/traefik/
        state: present

    - name: Create nexus-data volume
      community.docker.docker_volume:
        name: nexus-data
        state: present

    - name: Check if backup file exists
      stat:
        path: backup/nexus-backup.tar.gz
      register: backup_file

    - name: Restore Nexus from backup
      community.docker.docker_container:
        name: nexus_restore
        image: alpine
        state: started
        volumes:
          - nexus-data:/nexus-data
          - "{{ playbook_dir }}/backup:/backup"
        command: tar -xzf /backup/nexus-backup.tar.gz -C /nexus-data
      when: backup_file.stat.exists

    - name: Start Nexus container
      community.docker.docker_container:
        name: nexus
        image: "{{ nexus_docker_image }}"
        state: started
        ports:
          - "{{ nexus_port }}:{{ nexus_port }}"
          - "{{ docker_registry_port }}:{{ docker_registry_port }}"
        volumes:
          - nexus-data:/nexus-data

    - name: Wait for Nexus to start
      uri:
        url: "{{ nexus_service_rest_url }}/security/users"
        method: GET
        timeout: 10
      register: nexus_service
      until: nexus_service.status == 200
      retries: 10
      delay: 5

    - name: Get Nexus temp password
      command: "docker exec nexus cat /nexus-data/admin.password"
      register: nexus_temp_password
      when: not backup_file.stat.exists

    - name: Change Nexus password
      uri:
        url: "{{ nexus_service_rest_url }}/security/users/admin/change-password"
        method: PUT
        user: admin
        password: "{{ nexus_temp_password }}"
        body: "{{ nexus_password }}"
        headers:
          Content-Type: "text/plain"
        status_code: 204
      when: not backup_file.stat.exists

    - name: Set active realms
      uri:
        url: "{{ nexus_service_rest_url }}/security/realms/active"
        method: PUT
        user: admin
        password: "{{ nexus_password }}"
        body_format: json
        body:
          - "LdapRealm"
          - "DockerToken"
          - "NexusAuthenticatingRealm"
        headers:
          Content-Type: "application/json"
        status_code: 204

    - name: Create docker-hosted repository
      uri:
        url: "{{ nexus_service_rest_url }}/repositories/docker/hosted"
        method: POST
        user: admin
        password: "{{ nexus_password }}"
        body_format: json
        body:
          name: "docker-hosted"
          online: true
          storage:
            blobStoreName: "default"
            strictContentTypeValidation: true
            writePolicy: "ALLOW"
          docker:
            v1Enabled: false
            forceBasicAuth: false
        headers:
          Content-Type: "application/json"
        status_code: 200
      when: not backup_file.stat.exists

    - name: Creating docker-proxy repository
      uri:
        url: "{{ nexus_service_rest_url }}/repositories/docker/proxy"
        method: POST
        user: admin
        password: "{{ nexus_password }}"
        body_format: json
        headers:
          Content-Type: "application/json"
        body: 
          name: "docker-proxy"
          online: true
          storage:
            blobStoreName: "default"
            strictContentTypeValidation: true
          proxy:
            remoteUrl: "https://registry-1.docker.io"
            contentMaxAge: 1440
            metadataMaxAge: 1440
          negativeCache:
            enabled: true
            timeToLive: 1440
          httpClient:
            blocked: false
            autoBlock: false
          docker:
            v1Enabled: false
            forceBasicAuth: false
          dockerProxy:
            indexType: "HUB"

    - name: Creating ghcr-proxy repository
      uri:
        url: "{{ NEXUS_SERIVICE_REST_URL }}/repositories/docker/proxy"
        method: POST
        user: admin
        password: "{{ nexus_password }}"
        body_format: json
        headers:
          Content-Type: "application/json"
        body: 
          name: "ghcr-proxy"
          online: true
          storage:
            blobStoreName: "default"
            strictContentTypeValidation: true
          proxy:
            remoteUrl: "https://ghcr.io"
            contentMaxAge: 1440
            metadataMaxAge: 1440
          negativeCache:
            enabled: true
            timeToLive: 1440
          httpClient:
            blocked: false
            autoBlock: false
          docker:
            v1Enabled: false
            forceBasicAuth: false
          dockerProxy:
            indexType: "REGISTRY"

    - name: Create docker-group repository
      uri:
        url: "{{ nexus_service_rest_url }}/repositories/docker/group"
        method: POST
        user: admin
        password: "{{ nexus_password }}"
        body_format: json
        body:
          name: "docker-group"
          online: true
          storage:
            blobStoreName: "default"
            strictContentTypeValidation: true
          group:
            memberNames:
              - "docker-hosted"
              - "docker-proxy"
              - "ghcr-proxy"
          docker:
            v1Enabled: false
            forceBasicAuth: false
            httpPort: "{{ docker_registry_port }}"
        headers:
          Content-Type: "application/json"
        status_code: 200
      when: not backup_file.stat.exists

    - name: Pull Nexus Docker image
      community.docker.docker_image:
        name: "{{ docker_registry_frontend_fqdn }}/{{ nexus_docker_image }}"
        source: pull

    - name: Pull Portainer Docker image
      community.docker.docker_image:
        name: "{{ docker_registry_frontend_fqdn }}/{{ portainer_docker_image }}"
        source: pull

    - name: Pull Traefik Docker image
      community.docker.docker_image:
        name: "{{ docker_registry_frontend_fqdn }}/{{ traefik_docker_image }}"
        source: pull

    - name: Stop Nexus to create backup
      docker_container:
        name: nexus
        state: stopped
        stop_timeout: 120
      when: not backup_file.stat.exists

    - name: Create Nexus backup directory if it does not exist
      file:
        path: backup
        state: directory
      when: not backup_file.stat.exists

    - name: Create Nexus backup
      shell: |
        docker run --rm \
        -v nexus-data:/nexus-data \
        -v $(pwd)/backup:/backup \
        alpine sh -c "tar -C /nexus-data -czf /backup/nexus-backup.tar.gz ."
      when: not backup_file.stat.exists

    - name: Start Nexus
      docker_container:
        name: nexus
        state: started
      when: not backup_file.stat.exists

    - name: Wait for Nexus to start
      uri:
        url: "{{ nexus_service_rest_url }}/security/users"
        user: admin
        password: "{{ nexus_password }}"
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 60
      delay: 1

    - name: Create backup directory if it does not exist
      file:
        path: backup
        state: directory

    - name: Create backup of acme.json
      command: docker cp traefik:/data/acme.json backup/

    - debug:
        msg: "Bootstrap complete!"

    - name: Connect to vCenter
      community.vmware.vmware_about_info:
        hostname: "{{ govc_fqdn }}"
        username: "{{ govc_username }}"
        password: "{{ govc_password }}"
        validate_certs: no

    - name: Create library if it does not exist
      community.vmware.vmware_content_library_manager:
        hostname: "{{ govc_fqdn }}"
        username: "{{ govc_username }}"
        password: "{{ govc_password }}"
        library_name: "{{ vcenter_library_name }}"
        library_type: content
        datastore_name: "{{ govc_datastore }}"
        state: present
        validate_certs: no

    - name: Import OVA into library
      community.vmware.vmware_content_library_info:
        hostname: "{{ govc_fqdn }}"
        username: "{{ govc_username }}"
        password: "{{ govc_password }}"
        library_name: "{{ vcenter_library_name }}"
        validate_certs: no
      register: library_info

    - name: Import OVA if it does not exist
      community.vmware.vmware_content_deploy_template:
        hostname: "{{ govc_fqdn }}"
        username: "{{ govc_username }}"
        password: "{{ govc_password }}"
        template: "{{ coreos_ova_name }}"
        name: "{{ govc_vm }}"
        datacenter: "{{ datacenter_name }}"
        datastore: "{{ govc_datastore }}"
        folder: "{{ folder_name }}"
        state: present
        validate_certs: no
      when: not ova_exists

    - name: Configure VM
      community.vmware.vmware_guest:
        hostname: "{{ govc_fqdn }}"
        username: "{{ govc_username }}"
        password: "{{ govc_password }}"
        datacenter: "{{ datacenter_name }}"
        name: "{{ govc_vm }}"
        hardware:
          memory_mb: 32000
          num_cpus: 8
        customvalues:
          - key: "guestinfo.ignition.config.data"
            value: "{{ lookup('file', 'coreos/coreos.ign') | b64encode }}"
          - key: "guestinfo.ignition.config.data.encoding"
            value: "base64"
        state: poweredon
        validate_certs: no

    - name: Get VM IP
      community.vmware.vmware_guest_info:
        hostname: "{{ govc_fqdn }}"
        username: "{{ govc_username }}"
        password: "{{ govc_password }}"
        datacenter: "{{ datacenter_name }}"
        name: "{{ govc_vm }}"
        validate_certs: no
      register: vm_info

    - name: Set VM IP fact
      set_fact:
        VM_IP: "{{ vm_info['instance']['ipv4'] }}"

    - debug:
        msg: "YOUR PORTAINER PASSWORD IS: {{ portainer_password }}"
    - debug:
        msg: "{{ govc_vm }}'s IP: {{ vm_ip }}"

    - name: Define the custom DNS list
      set_fact:
        custom_dns_a_record: "{{ vm_ip }} {{ vm_fqdn }}"
        custom_cname_record: |
          cname={{ portainer_backend_fqdn }},{{ vm_fqdn }}
          cname={{ portainer_frontend_fqdn }},{{ vm_fqdn }}
          cname={{ openldap_backend_fqdn }},{{ vm_fqdn }}
          cname={{ openldap_frontend_fqdn }},{{ vm_fqdn }}
          cname={{ vm_nexus_backend_fqdn }},{{ vm_fqdn }}
          cname={{ vm_nexus_frontend_fqdn }},{{ vm_fqdn }}

    - name: Append the custom DNS list to the pihole custom list file and restart the DNS service
      shell: |
        docker exec pihole sh -c "\
        echo \"{{ custom_dns_a_record }}\" >> /etc/pihole/custom.list && \
        echo \"{{ custom_cname_record }}\" >> /etc/dnsmasq.d/05-pihole-custom-cname.conf && \
        pihole restartdns"

    - name: Check health of each service
      uri:
        url: "https://{{ item }}"
        method: GET
        status_code: 200
      loop: "{{ services }}"
      register: result
      ignore_errors: true

    - name: Display health status
      debug:
        msg: "{{ item.item }} is {{ 'healthy' if item.status == 200 else 'unhealthy' }}"
      loop: "{{ result.results }}"
